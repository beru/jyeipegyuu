// This file was generated by WTL Dialog wizard 
// SettingView.cpp : Implementation of CSettingView

#include "stdafx.h"
#include "SettingView.h"

#include "setting.h"

// CSettingView
CSettingView::CSettingView()
{
}

CSettingView::~CSettingView()
{
}

BOOL CSettingView::PreTranslateMessage(MSG* pMsg)
{
	return CWindow::IsDialogMessage(pMsg);
}

LRESULT CSettingView::OnInitDialog(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled)
{
	DoDataExchange();
	m_wndSpinQpShift.SetRange(0, 10);
	m_wndSpinQpRemain.SetRange(0, 5);
	m_wndSpinHblockness.SetRange(0, 8);
	m_wndSpinVblockness.SetRange(0, 8);
	
	m_wndSpinZeroOneLimit.SetRange(0, 7);
	return 1;  // Let the system set the focus
}


LRESULT CSettingView::OnCommand(UINT codeNotify, int id, HWND hwndCtl)
{
	switch (id) {
	case IDC_CHECK_quantize_matrix:
	case IDC_CHECK_reorder_by_frequency:
	case IDC_CHECK_enable_DC_prediction:
		OnSettingChange();
		break;
	}
	return 0;
}

LRESULT CSettingView::OnVScroll(int code, short pos, HWND hwndCtl)
{
	if (code != SB_THUMBPOSITION) {
		return 0;
	}
	if (0
		|| hwndCtl == m_wndSpinQpShift.m_hWnd
		|| hwndCtl == m_wndSpinQpRemain.m_hWnd
		|| hwndCtl == m_wndSpinHblockness.m_hWnd
		|| hwndCtl == m_wndSpinVblockness.m_hWnd
		|| hwndCtl == m_wndSpinZeroOneLimit.m_hWnd
		)
	{
		OnSettingChange();
	}
	return 0;
}

void CSettingView::OnSettingChange()
{
	if (m_onSettingChangeDelegate.empty()) 
		return;
	
	Setting s;
	s.qp = m_wndSpinQpShift.GetPos() * 6 + m_wndSpinQpRemain.GetPos();
	s.hBlockness = m_wndSpinHblockness.GetPos();
	s.vBlockness = m_wndSpinVblockness.GetPos();
	s.useQuantMatrix = m_wndButtonQuantizeMatrix.GetCheck();
	s.reorderByFrequency = m_wndButtonReorderByFrequency.GetCheck();
	s.enableDCprediction = m_wndButtonEnableDCPrediction.GetCheck();
	s.zeroOneLimit = m_wndSpinZeroOneLimit.GetPos();

	m_onSettingChangeDelegate(s);
}
